#!/bin/bash

# Infos
installerVersion="0.1.3"
while read line; do
	if [[ $line == "globalvars.version="* ]]; then
		iandiVersion="$(cut -d'"' -f 2 <<< $line)"
		break
	fi
done < iandi

echo "Iandi $iandiVersion"
echo -e "Installer $installerVersion\n"

# Check for permissions
if [[ $UID != 0 ]]; then
	echo "You are not logged as root (sudo ./install)."
	read -p "Do you want continue anyway? [y/N] " continueAsNotRoot
	case $continueAsNotRoot in
		[yY][eE][sS]|[yY])
			echo "Yes."
			continueAsNotRoot=true
			;;
		*)
		echo "No."
		continueAsNotRoot=false
		;;
	esac
	if ! $continueAsNotRoot ; then
		exit 4
	fi
fi

# Check if using sudo and getting real username
if [ -z ${SUDO_USER} ]; then
	cuser=$USER
else
	cuser=$SUDO_USER
fi

# Check args
yes2all=false

for arg in $@; do
	case $arg in
		-y|--yes) # skip all questions simply by answering with the default value
			yes2all=true
			;;
	esac
done

# Inputs
## package manager
while true
do
	if $yes2all ; then
		installDep=true
		break
	else
		read -p "Install dependencies? [Y/n] " installDep
		case $installDep in
			[nN][oO]|[nN])
				echo "No."
				installDep=false
				break
				;;
			*)
			echo "Yes."
			installDep=true
			break
			;;
		esac
	fi
done
if $installDep ; then

	# Get default package manager
	if command -v apt &> /dev/null; then
		pmDefault="apt"
	elif command -v dnf &> /dev/null; then
		pmDefault="dnf"
	elif command -v yum &> /dev/null; then
		pmDefault="yum"
	elif command -v pacman &> /dev/null; then
		pmDefault="pacman"
	fi

	while true
	do
		if $yes2all ; then
			pm=$pmDefault
			break
		else
			read -p "Package manager: " pm
			case $pm in
				[aA][pP][tT])
					pm="apt"
					break
					;;
				[dD][nN][fF])
					pm="dnf"
					break
					;;
				[yY][uU][mM])
					pm="yum"
					break
					;;
				#[hH][oO][mM][eE][bB][rR][eE][wW]|[bB][rR][eE][wW])
				#	pm="homebrew"
				#	break
				#	;;
				[pP][aA][cC][mM][aA][nN])
					pm="pacman"
					break
					;;
				#[pP][oO][rR][tT][aA][gG][eE]|[eE][mM][eE][rR][gG][eE])
				#	pm="portage"
				#	break
				#	;;
				#[zZ][yY][pP][eE][rR])
				#	pm="zypper"
				#	break
				#	;;
				*)
					echo "Package manager not supported."
					echo "Use it manually out of installer."
					exit 1
					;;
			esac
		fi
	done
	echo "$pm."
fi

## precompiled snowboy
while true
do
	if $yes2all ; then
		installSb=true
		break
	else
		read -p "Install snowboy? [Y/n] " installSb
		case $installSb in
			[nN][oO]|[nN])
				installSb=false
				echo "No."
				break
				;;
			*)
				installSb=true
				echo "Yes."
				break
				;;
		esac
	fi
done

## Procname
while true
do
	if $yes2all ; then
		compileProcname=true
		break
	else
		read -p "Compile procname? [Y/n] " compileProcname
		case $compileProcname in
			[nN][oO]|[nN])
				echo "No."
				compileProcname=false
				break
				;;
			*)
				echo "Yes."
				compileProcname=true
				break
				;;
		esac
	fi
done

## Terminal Virtual Face
while true
do
	if $yes2all ; then
		getTermVFace=true
		break
	else
		read -p "Get Terminal Virtual Face? [Y/n] " getTermVFace
		case $getTermVFace in
			[nN][oO]|[nN])
				echo "No."
				getTermVFace=false
				break
				;;
			*)
				echo "Yes."
				getTermVFace=true
				break
				;;
		esac
	fi
done

## Tdlib
while true
do
	if $yes2all ; then
		installTdl=true
		break
	else
		read -p "Install tdlib? [Y/n] " installTdl
		case $installTdl in
			[nN][oO]|[nN])
				echo "No."
				installTdl=false
				break
				;;
			*)
				echo "Yes."
				installTdl=true
				break
				;;
		esac
	fi
done

## Brain mime type
while true
do
	if $yes2all ; then
		installBrnMime=true
		break
	else
		read -p "Install brain MIME type? [Y/n] " installBrnMime
		case $installBrnMime in
			[nN][oO]|[nN])
				echo "No."
				installBrnMime=false
				break
				;;
			*)
				echo "Yes."
				installBrnMime=true
				break
				;;
		esac
	fi
done

## Install Iandi on system
while true
do
	if $yes2all ; then
		installOnSys=true
		break
	else
		read -p "Install Iandi on system? [Y/n] " installOnSys
		case $installOnSys in
			[nN][oO]|[nN])
				echo "No."
				installOnSys=false
				break
				;;
			*)
				echo "Yes."
				installOnSys=true
				break
				;;
		esac
	fi
done
if $installOnSys ; then
	installOnSysBinDefaultPath="/usr/local/bin/"
	if $yes2all ; then
		installOnSysBinPath=$installOnSysBinDefaultPath
	else
		read -p "Executable path: [$installOnSysBinDefaultPath] " installOnSysBinPath
		if [ "$installOnSysBinPath" == "" ] ; then
			installOnSysBinPath=$installOnSysBinDefaultPath
		fi
	fi

	if [ "$cuser" == "root" ]; then
		cuserPath=$HOME
	else
		cuserPath="/home/$cuser"
	fi
	installOnSysDefaultPath="$cuserPath/.iandi/"
	if $yes2all ; then
		installOnSysPath=$installOnSysDefaultPath
	else
		read -p "Resources path: [$installOnSysDefaultPath] " installOnSysPath
		if [ "$installOnSysPath" == "" ] ; then
			installOnSysPath=$installOnSysDefaultPath
		fi
	fi
fi
if $installOnSys ; then
	if $yes2all ; then
		autostartIandi=true
	else
		read -p "Autostart Iandi on login? [Y/n] " autostartIandi
		case $autostartIandi in
			[nN][oO]|[nN])
				echo "No."
				autostartIandi=false
				;;
			*)
				echo "Yes."
				autostartIandi=true
				;;
		esac
	fi
fi

echo "[ Ok ] Now you can go afk."

# Checking ram info
ram=$(grep -i memtotal /proc/meminfo)
IFS=" "
read -raramarray<<<"$ram"
ram=$((${ramarray[1]}/1024/1024))
if [ $(($ram < 3)) ]; then
	dosplit=true
else
	dosplit=false
fi

# Dependencies
if $installDep ; then
	case $pm in
		apt)
			apt-get -y install python-pip python-dev python-gi python-setuptools git portaudio19-dev libpulse-dev libespeak-dev libatlas-base-dev vlc ffmpeg make zlib1g-dev libssl-dev gperf cmake clang libc++-dev libc++abi-dev swig
			prgexitstatus=$?
			if [ $prgexitstatus -ne 0 ] ; then
				echo "apt failed with exit code $prgexitstatus."
				exit 3
			fi
			if $dosplit; then
				apt-get -y install php-cli
				prgexitstatus=$?
				if [ $prgexitstatus -ne 0 ] ; then
					echo "apt failed with exit code $prgexitstatus."
					exit 3
				fi
			fi
			;;
		dnf|yum)
			$pm -y --setopt=strict=no install python-pip python-devel python2-devel python-setuptools git portaudio-devel pulseaudio-libs-devel libespeak-dev atlas-sse2-static atlas-devel vlc ffmpeg make zlib-devel openssl-devel gperf gcc-c++ cmake clang libcxx libcxxabi swig redhat-rpm-config
			prgexitstatus=$?
			if [ $prgexitstatus -ne 0 ] ; then
				echo "$pm failed with exit code $prgexitstatus."
				exit 3
			fi
			if $dosplit; then
				$pm -y --setopt=strict=no install php
				prgexitstatus=$?
				if [ $prgexitstatus -ne 0 ] ; then
					echo "$pm failed with exit code $prgexitstatus."
					exit 3
				fi
			fi
			#wget -O blas-3.9.0-5.rpm https://download-ib01.fedoraproject.org/pub/fedora/linux/releases/33/Everything/x86_64/os/Packages/b/blas-3.9.0-5.fc33.i686.rpm
			;;
		homebrew)
			brew install python python-setuptools git portaudio pulseaudio libespeak-dev vlc ffmpeg make zlib openssl gperf cmake swig
			prgexitstatus=$?
			if [ $prgexitstatus -ne 0 ] ; then
				echo "homebrew failed with exit code $prgexitstatus."
				exit 3
			fi
			if $dosplit; then
				brew install php
				prgexitstatus=$?
				if [ $prgexitstatus -ne 0 ] ; then
					echo "homebrew failed with exit code $prgexitstatus."
					exit 3
				fi
			fi
			;;
		pacman)
			pacman --noconfirm -S python-pip python-dev python-setuptools git portaudio19-dev libpulse-dev libespeak-dev libatlas-base-dev vlc ffmpeg make zlib1g-dev libssl-dev gperf cmake clang libc++-dev libc++abi-dev swig
			prgexitstatus=$?
			if [ $prgexitstatus -ne 0 ] ; then
				echo "pacman failed with exit code $prgexitstatus."
				exit 3
			fi
			if $dosplit; then
				pacman --noconfirm -S php-cli
				prgexitstatus=$?
				if [ $prgexitstatus -ne 0 ] ; then
					echo "pacman failed with exit code $prgexitstatus."
					exit 3
				fi
			fi
			;;
		portage)
			emerge python-pip python-dev python-setuptools git portaudio19-dev libpulse-dev libespeak-dev libatlas-base-dev vlc ffmpeg make zlib1g-dev libssl-dev gperf cmake clang libc++-dev libc++abi-dev swig
			prgexitstatus=$?
			if [ $prgexitstatus -ne 0 ] ; then
				echo "emerge failed with exit code $prgexitstatus."
				exit 3
			fi
			if $dosplit; then
				emerge php-cli
				prgexitstatus=$?
				if [ $prgexitstatus -ne 0 ] ; then
					echo "emerge failed with exit code $prgexitstatus."
					exit 3
				fi
			fi
			;;
		*)
			echo "Unexpected error in dependencies block."
			exit 2
			;;
	esac

	if commad -v pip2 &> /dev/null; then
		pipcmd="pip2"
	else
		pipcmd="pip"
	fi
	#$pipcmd install --no-input setuptools pyaudio playsound pyttsx3 speechrecognition pocketsphinx pyalsaaudio python-vlc==3.0.11115 youtube-dl
	$pipcmd install --no-input -r requirements.txt
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "$pipcmd failed with exit code $prgexitstatus."
		exit 3
	fi
	
	echo "[ Ok ] Dependencies installed."
fi

# Snowboy
## https://github.com/seasalt-ai/snowboy
if $installSb; then
	git clone https://github.com/seasalt-ai/snowboy
	cd snowboy/swig/Python/
	make

	cd ../Python3/
	sed -i "s/SNOWBOYDETECTSWIGLIBFILE = _snowboydetect.so/SNOWBOYDETECTSWIGLIBFILE = _snowboydetect_py3.so/" Makefile
	sed -i "s/%module snowboydetect/%module snowboydetect_py3/" snowboy-detect-swig.i
	make

	cd ../../../
	cp snowboy/resources/common.res resources/
	chown -R $cuser:$cuser resources/common.res

	cp snowboy/swig/Python/_snowboydetect.so .
	chown -R $cuser:$cuser _snowboydetect.so

	cp snowboy/swig/Python3/_snowboydetect_py3.so .
	chown -R $cuser:$cuser _snowboydetect_py3.so

	rm -rf snowboy/

	echo "[ Ok ] Snowboy installed."
fi

# Procname
if $compileProcname; then
	cd procname-0.2/
	make build
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "make failed with exit code $prgexitstatus while compiling procname."
		exit 3
	fi
	mv procname.so ../
	cd ../
	echo "[ Ok ] Procname compiled."
fi

# Terminal Virtual Face
## https://github.com/Bytezz/VirtualFace
if $getTermVFace; then
	rawFileUrl="https://raw.githubusercontent.com/Bytezz/VirtualFace/master/terminal_virtualface.py"
	# search an installed program to download the raw file
	if command -v curl &> /dev/null; then # verify if curl is installed, if true use it to download
		curl -o terminal_virtualface.py $rawFileUrl
		prgexitstatus=$?
		if [ $prgexitstatus -ne 0 ] ; then
			echo "curl failed with exit code $prgexitstatus while downloading Terminal Virtual Face."
			exit 3
		fi
	elif command -v wget &> /dev/null; then
		wget -O terminal_virtualface.py $rawFileUrl
		prgexitstatus=$?
		if [ $prgexitstatus -ne 0 ] ; then
			echo "wget failed with exit code $prgexitstatus while downloading Terminal Virtual Face."
			exit 3
		fi
	else
		GET $rawFileUrl > terminal_virtualface.py
		prgexitstatus=$?
		if [ $prgexitstatus -ne 0 ] ; then
			echo "GET failed with exit code $prgexitstatus while downloading Terminal Virtual Face."
			exit 3
		fi
	fi
	echo "[ Ok ] Terminal Virtual Face downloaded."
fi

# Tdlib
if $installTdl; then
	rm -rf td/
	git clone https://github.com/tdlib/td.git
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "git failed with exit code $prgexitstatus."
		exit 3
	fi
	cd td
	rm -rf build/
	mkdir build/
	cd build/
	if [ "$(grep -Ei 'debian|buntu|mint' /etc/*release)" ]; then
		CXXFLAGS="-stdlib=libc++" CC=/usr/bin/clang CXX=/usr/bin/clang++ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=/usr/local ..
	else
		cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=/usr/local ..
	fi
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "cmake failed with exit code $prgexitstatus."
		exit 3
	fi
	if $dosplit; then
		cmake --build . --target prepare_cross_compiling
		prgexitstatus=$?
		if [ $prgexitstatus -ne 0 ] ; then
			echo "cmake failed with exit code $prgexitstatus."
			exit 3
		fi
		cd ..
		php SplitSource.php
		prgexitstatus=$?
		if [ $prgexitstatus -ne 0 ] ; then
			echo "php failed with exit code $prgexitstatus."
			exit 3
		fi
		cd build/
	fi
	cmake --build . --target install
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "cmake failed with exit code $prgexitstatus."
		exit 3
	fi
	if $dosplit; then
		cd ..
		php SplitSource.php --undo
		prgexitstatus=$?
		if [ $prgexitstatus -ne 0 ] ; then
			echo "php failed with exit code $prgexitstatus."
			exit 3
		fi
		cd ..
	else
		cd ../../
	fi
	
	echo "[ Ok ] Tdlib installed."
fi

# Brain mime type
if $installBrnMime; then
	# Adding mime
	xdg-mime install resources/mime/sobot-brain.xml
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "xdg-mime failed with exit code $prgexitstatus."
		exit 3
	fi
	# Pairing 48 icon to mime
	xdg-icon-resource install --context mimetypes --size 48 resources/mime/brain-file-icon-48.png text-brain
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "xdg-icon-resource failed with exit code $prgexitstatus."
		exit 3
	fi
	# Pairing 256 icon to mime
	xdg-icon-resource install --context mimetypes --size 256 resources/mime/brain-file-icon-256.png text-brain
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "xdg-icon-resource failed with exit code $prgexitstatus."
		exit 3
	fi
fi

# Install Iandi on system
if $installOnSys; then
	mkdir -p "$installOnSysBinPath"
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "mkdir failed with exit code $prgexitstatus."
		exit 3
	fi

	cp iandi "$installOnSysBinPath"
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "cp failed with exit code $prgexitstatus."
		exit 3
	fi
	#
	mkdir -p "$installOnSysPath"
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "mkdir failed with exit code $prgexitstatus."
		exit 3
	fi
	
	rsync -av --exclude=iandi ./* "$installOnSysPath"
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "cp failed with exit code $prgexitstatus."
		exit 3
	fi

	if [ "$installOnSysPath" == "$cuserPath/.iandi/" ]; then
		chown -R $cuser:$cuser "$installOnSysPath"
		prgexitstatus=$?
		if [ $prgexitstatus -ne 0 ] ; then
			echo "chown failed with exit code $prgexitstatus."
			exit 3
		fi
	fi
	#
	mkdir -p /usr/share/applications/
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "mkdir failed with exit code $prgexitstatus."
		exit 3
	fi

	cp -r resources/launcher/iandi.desktop /usr/share/applications/
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "cp failed with exit code $prgexitstatus."
		exit 3
	fi

	chmod +x /usr/share/applications/iandi.desktop
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "chmod failed with exit code $prgexitstatus."
		exit 3
	fi

	mkdir -p /usr/share/icons/
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "mkdir failed with exit code $prgexitstatus."
		exit 3
	fi

	cp -r resources/icons/icon-round2.png /usr/share/icons/iandi.png
	prgexitstatus=$?
	if [ $prgexitstatus -ne 0 ] ; then
		echo "cp failed with exit code $prgexitstatus."
		exit 3
	fi
	#
	if $autostartIandi; then
		if [ "$installOnSysPath" == "$cuserPath/.iandi/" ]; then
			autostartPath="$cuserPath/.config/autostart/"
		else
			autostartPath="$HOME/.config/autostart/"
		fi

		mkdir -p "$autostartPath"
		prgexitstatus=$?
		if [ $prgexitstatus -ne 0 ] ; then
			echo "mkdir failed with exit code $prgexitstatus."
			exit 3
		fi

		chown -R $cuser:$cuser "$autostartPath"
		if [ $prgexitstatus -ne 0 ] ; then
			echo "chown failed with exit code $prgexitstatus."
			exit 3
		fi

		cp -r resources/launcher/iandi.desktop "$autostartPath"
		prgexitstatus=$?
		if [ $prgexitstatus -ne 0 ] ; then
			echo "cp failed with exit code $prgexitstatus."
			exit 3
		fi
		
		if [ "$installOnSysPath" == "$cuserPath/.iandi/" ]; then
			chown -R $cuser:$cuser "$autostartPath/iandi.desktop"
			prgexitstatus=$?
			if [ $prgexitstatus -ne 0 ] ; then
				echo "chown failed with exit code $prgexitstatus."
				exit 3
			fi
		fi
		
		chmod +x "$autostartPath/iandi.desktop"
		prgexitstatus=$?
		if [ $prgexitstatus -ne 0 ] ; then
			echo "chmod failed with exit code $prgexitstatus."
			exit 3
		fi
	fi
fi

echo "[Done] Installation completed."
exit 0